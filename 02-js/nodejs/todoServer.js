/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)


  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require("express");
const bodyParser = require("body-parser");
const { v4: uuidV4 } = require("uuid");
const fs = require("fs");
const path = require("path");
const filePath = path.join(__dirname, "todoList.txt");

const app = express();

app.use(bodyParser.json());

const todoList = [];
const port = 3000;

app.get("/todos", (req, res) => {
  readFile(filePath)
    .then((resp) => {
      console.log(resp);
      if (resp.success) {
        res.status(200).json(resp.data);
      }
    })
    .catch((err) => {
      res.status(404).json("something went wrong");
    });
});

app.get("/todos/:id", async (req, res) => {
  const id = req.params.id;
  try {
    let readFileResp = await readFile(filePath);
    const item = readFileResp.data.find((item) => JSON.parse(item).id === id);

    if (item) {
      res.status(200).json(JSON.parse(item));
    } else {
      res.status(404).json("Requested task for corresponding id is not Found");
    }
  } catch (exception) {
    res.status(404).json(exception);
  }
});

app.post("/todos", async (req, res) => {
  const uuid = uuidV4();

  let item = req.body;

  item.id = uuid;
  item = JSON.stringify(item);

  try {
    const resp = await readFile(filePath);
    let content = resp.data;

    if (content) {
      content.push(item);
      content = JSON.stringify(content);

      await writeFile(filePath, content);
    } else {
      let itemArray = [];
      itemArray.push(item);
      let firstItem = JSON.stringify(itemArray);

      await writeFile(filePath, firstItem);
    }

    res.status(201).json({ id: uuid });
  } catch (exception) {
    res.status(404).json({});
  }
});

app.put("/todos/:id", async (req, res) => {
  const id = req.params.id;
  const body = req.body;

  const todoResponse = await readFile(filePath);

  let todo = JSON.parse(
    todoResponse.data.find((item) => JSON.parse(item).id === id)
  );

  if (todo) {
    const dataList = todoResponse.data.splice(
      todoList.findIndex((item) => item.id === id),
      1
    );

    todo.title = body.title;
    todo.description = body.description;

    todo = JSON.stringify(todo);
    todoResponse.data.push(todo);

    await writeFile(filePath, JSON.stringify(todoResponse.data));
    res.status(200).json({});
  } else {
    res.status(404).json({});
  }
});

app.delete("/todos/:id", async (req, res) => {
  const id = req.params.id;
  const todoResponse = await readFile(filePath);

  const deletedItem = todoResponse.data.splice(
    todoResponse.data.findIndex((item) => JSON.parse(item).id === id),
    1
  );
  if (deletedItem) {
    await writeFile(filePath, JSON.stringify(todoResponse.data));
    res.status(200).json({ msg: "deleted successfully" });
  } else {
    res.status(404).json({ msg: "something went wrong!" });
  }
});

function readFile(path) {
  return new Promise((resolve, reject) => {
    fs.readFile(path, "utf-8", (error, result) => {
      if (error) {
        reject({ success: false, data: undefined });
      } else {
        const jsonObj = result ? JSON.parse(result) : undefined;
        resolve({ success: true, data: jsonObj });
      }
    });
  });
}

function writeFile(path, data) {
  return new Promise((resolve, reject) => {
    fs.writeFile(path, data, (err) => {
      if (err) {
        throw new Error("while writing a file something went wrong.");
      }
      resolve(true);
    });
  });
}

app.all("*", (req, res) => res.status(404).json("Not Found"));

// app.listen(port, () => console.log(`App listening on port : ${port}`));

module.exports = app;
